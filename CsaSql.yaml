---
- name: Starting SQL Installation
  hosts: STN-Ivs,STN-Ma
  gather_facts: no
    # vars_files:
    #  - Sqlvars/vars.yml
  tasks:
    - name: Adding IGT Services to the local Admin
      win_group_membership:
        name: "{{ LocalGroupName }}"
        members:
          - "{{ SVCAccountName }}"
        state: present

- name: Set the log on user to a domain account
  hosts: STN-Ivs
    # vars_files:
    #- Sqlvars/vars.yml
  tasks:
    - name: Adding IGT Services to MSSQLSERVER and SQL SERVER Agent
      win_service:
        name: 'MSSQL$IVS'
        state: restarted
        username: "{{SQLSVCAccountName}}"
        password: "{{SQLSVCpassword}}"
        name: 'SQLAgent$IVS'
        state: restarted
        username: "{{SQLSVCAccountName}}"
        password: "{{SQLSVCpassword}}"

- name: Set the log on user to a domain account
  hosts: STN-Ma
    # vars_files:
    #- Sqlvars/vars.yml
  tasks:
    - name: Adding IGT Services to MSSQLSERVER and SQL SERVER Agent
      win_service:
        name: 'MSSQL$MA'
        state: restarted
        username: "{{SQLSVCAccountName}}"
        password: "{{SQLSVCpassword}}"
        name: 'SQLAgent$MA'
        state: restarted
        username: "{{SQLSVCAccountName}}"
        password: "{{SQLSVCpassword}}"

- name: Enable Named Pipes for SQL Server[IVS]
  hosts: STN-Ivs
  become_method: runas
  tasks:
    - win_shell: |
        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | Out-Null
        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement") | Out-Null
        $smo = 'Microsoft.SqlServer.Management.Smo.'
        $wmi = new-object ($smo + 'Wmi.ManagedComputer').
        $SQLInstance = $wmi.ServerInstances.Name
        $uri = "$($wmi.urn.value)/ ServerInstance[@Name=`'$SQLInstance`']/ServerProtocol[@Name='Np']"
        $Np = $wmi.GetSmoObject($uri)
        if ($Np.IsEnabled -ne "True")
        {
         $Np.IsEnabled = $true
         $Np.Alter()
        # if ($server.serviceSuffix) {
         Restart-Service "MSSQL`$$($SQLInstance)" -Force | Out-Null
          }
         # else {
         # Restart-Service -name "MSSQLSERVER" -Force | out-null
         # }
         # }

- name: Enable Named Pipes for SQL Server[MA]
  hosts: STN-Ma
  become_method: runas
  tasks:
    - win_shell: |
        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | Out-Null
        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement") | Out-Null
        $smo = 'Microsoft.SqlServer.Management.Smo.'
        $wmi = new-object ($smo + 'Wmi.ManagedComputer').
        $SQLInstance = $wmi.ServerInstances.Name
        $uri = "$($wmi.urn.value)/ ServerInstance[@Name=`'$SQLInstance`']/ServerProtocol[@Name='Np']"
        $Np = $wmi.GetSmoObject($uri)
        if ($Np.IsEnabled -ne "True")
        {
         $Np.IsEnabled = $true
          $Np.Alter()
        # if ($server.serviceSuffix) {
         Restart-Service "MSSQL`$$($SQLInstance)" -Force | Out-Null
          }
         # else {
         # Restart-Service -name "MSSQLSERVER" -Force | out-null
         # }
         # }


- name: Set service startup mode to auto and ensure it is started
  hosts: STN-Ivs,STN-Ma
  tasks:
    - name: Enable SQL Browser Service
      win_service:
        name: SQL Server Browser
        start_mode: auto
        state: started

- name: Create DB shells on MA Server
  hosts: STN-Ma
  tasks:
    - name: clone git repo
      win_shell: git clone https://github.com/mayil983/Myproject.git Documents\
    - name: Creating DB shells
      win_shell: |
        Invoke-sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "master" -InputFile "\Documents\createDBMA.sql" -querytimeout 180
      

- name: Create DB shells on MA Server
  hosts: STN-Ivs
    #vars:
    #sql_query: "Documents\createDBMA.sql"
  tasks:
    - win_shell: |
        Invoke-sqlcmd -ServerInstance "STN-SQLIVS\IVS" -Database "master" -InputFile "\Documents\CreateDBIVS.sql" -querytimeout 180


- name: Running IPS steps
  hosts: STN-Ivs,STN-Ma
  #vars_prompt:
   # - name: UserInput
    #  prompt: "Please proceed with the IPS steps manually by selecring the required Installers in sql  Servers \n Press [y] to continue"
     # private: false
  tasks:
    - name: Proceeding to the furter steps in Sql Install
      when: RunIPS == "true"
      debug:
        msg: "Proceeding to the further steps in Sql Install"

    - name: Exiting the Installation
      when: RunIPS == "false"
      debug:
        msg: "you selected not to do the IPS steps"

- name: Create All users in IVS  Server
  hosts: STN-Ivs
          #  vars_files:
          #    - Sqlvars/vars.yml
  tasks:
    - win_shell: |
         Invoke-sqlcmd -ServerInstance "STN-SQLIVS\IVS" -Database "master" -InputFile "\Documents\createallusers.sql" -querytimeout 180

- name: Create All users in MA Server
  hosts: STN-Ma
  tasks:
    - win_shell: |
         Invoke-sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "master" -InputFile "\Documents\createallusers.sql" -querytimeout 180

- name: Running Index Script
  hosts: STN-Ma
  tasks:
    - name: Running Index on  table maager Db
      when: TableManager == "true"
      win_shell: |
         $tmQuery = '';
         $EnterpriseEdition = Invoke-Sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "master" -Query "SELECT SERVERPROPERTY('Edition') as Edition" -querytimeout 180
         if($EnterpriseEdition.Edition | Select-String -Pattern "Enterprise" -SimpleMatch)
         {
           $tmQuery = get-content "\Documents\TableManager_Enterprise.sql" -raw
         }
         else{
           $tmQuery = get-content "\Documents\TableManager_Index.sql" -raw
         }
         Invoke-Sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "master" -InputFile $tmQuery

- name: Configure Range Table
  hosts: STN-Ma
  vars:
    RunIndex: false
  tasks:
    - name: Adding Range Tables
      when: RunIndex == "true"
      win_shell: |
         Invoke-sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "CTA" -InputFile "\Documents\Range_CTA.sql" -querytimeout 180
         Invoke-sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "Accounting" -InputFile "\Documents\Range_MA.sql" -querytimeout 180
         Invoke-sqlcmd -ServerInstance "STN-SQLMA\MA" -Database "PlayerManagement" -InputFile "\Documents\Range_PM.sql" -querytimeout 180




                                                                     
